.版本 2
.支持库 console
.支持库 spec
.支持库 commobj

.程序集 程序集1
.程序集变量 已处理路径, 文本型, , "0"
.程序集变量 阈值大小, 整数型
.程序集变量 目标大小, 整数型
.程序集变量 显示详情, 整数型
.程序集变量 输出日志, 文本型
.程序集变量 全百分比, 小数型, , "0"
.程序集变量 全扩展名, 文本型, , "0"
.程序集变量 详情数组, 文本型, , "0"
.程序集变量 最低质量, 整数型
.程序集变量 降低尺寸, 整数型
.程序集变量 当前版本, 文本型

.子程序 _启动子程序, 整数型, , 本子程序在程序启动后最先执行
.局部变量 搜寻路径, 文本型
.局部变量 临时数组, 文本型, , "0"
.局部变量 i
.局部变量 当前百分比, 小数型
.局部变量 已有配置, 文本型
.局部变量 输入内容, 文本型
.局部变量 是否已有配置, 逻辑型

当前版本 ＝ “v0.2”
全扩展名 ＝ 分割文本 (“jpg,png,bmp,jpeg”, “,”, )
详情数组 ＝ 分割文本 (“-quiet,-short, ,-v”, “,”, )
临时数组 ＝ 分割文本 (#全百分比, #换行符, )
.计次循环首 (取数组成员数 (临时数组), i)
    当前百分比 ＝ 到小数 (临时数组 [i])
    加入成员 (全百分比, 当前百分比)
.计次循环尾 ()
.如果真 (取数组成员数 (全百分比) ≠ 101)
    信息框 (“内部错误，百分比预设数量不符！”, 0, , )
    结束 ()
.如果真结束
检测更新 ()
输出颜色 (“请输入要搜寻的路径：”, #控制台颜色.白色, 真)
搜寻路径 ＝ 标准输入 ()
已有配置 ＝ 编码_Utf8到Ansi (读入文件 (取运行目录 () ＋ “\转换设置.ini”)) ＋ #换行符
.如果真 (快速取出现次数 (已有配置, “搜寻路径”) ≠ 0)
    输出颜色 (“是否使用上次保存的设置？(y/N)：”, #控制台颜色.白色, 真)
    输入内容 ＝ 标准输入 ()
    .如果真 (到小写 (输入内容) ＝ “y” 或 到小写 (输入内容) ＝ “yes” 或 到小写 (输入内容) ＝ “真” 或 到小写 (输入内容) ＝ “是”)
        是否已有配置 ＝ 真
        阈值大小 ＝ 到整数 (文本_取出中间文本 (已有配置, “转换阈值=”, #换行符))
        目标大小 ＝ 到整数 (文本_取出中间文本 (已有配置, “转换目标=”, #换行符))
        显示详情 ＝ 到整数 (文本_取出中间文本 (已有配置, “显示详情=”, #换行符))
        最低质量 ＝ 到整数 (文本_取出中间文本 (已有配置, “最低质量=”, #换行符))
        降低尺寸 ＝ 到整数 (文本_取出中间文本 (已有配置, “降低尺寸=”, #换行符))
    .如果真结束

.如果真结束
.如果真 (是否已有配置 ＝ 假)
    输出颜色 (“中间文件大于多少时开始转换？(单位KB，仅整数输入，不要写单位)：”, #控制台颜色.白色, 真)
    阈值大小 ＝ 到整数 (标准输入 ()) × 1024
    输出颜色 (“转换目标大小？(单位KB，仅整数输入，不要写单位)：”, #控制台颜色.白色, 真)
    目标大小 ＝ 到整数 (标准输入 ()) × 1024
    输出颜色 (“是否显示每张图的转换详情？(0:不显示，1:简要，2:标准，3:详细，只允许输入整数)：”, #控制台颜色.白色, 真)
    显示详情 ＝ 到整数 (标准输入 ())
    输出颜色 (“最低允许的WebP质量？(0-100纯整数输入)：”, #控制台颜色.白色, 真)
    最低质量 ＝ 到整数 (标准输入 ())
    输出颜色 (“在最低质量限制内达不到目标大小时，以短边为标准将分辨率降到多少？(0为关闭，只允许输入整数)：”, #控制台颜色.白色, 真)
    降低尺寸 ＝ 到整数 (标准输入 ())
.如果真结束
.如果真 (阈值大小 ＜ 1024)
    阈值大小 ＝ 1280 × 1024
.如果真结束
.如果真 (目标大小 ＜ 1024)
    目标大小 ＝ 768 × 1024
.如果真结束
.如果真 (显示详情 ＜ 0 或 显示详情 ＞ 3)
    显示详情 ＝ 0
.如果真结束
.如果真 (最低质量 ＜ 0 或 最低质量 ＞ 100)
    最低质量 ＝ 0
.如果真结束
.如果真 (降低尺寸 ＜ 0)
    降低尺寸 ＝ 0
.如果真结束
已有配置 ＝ “搜寻路径=” ＋ 搜寻路径 ＋ #换行符 ＋ “转换阈值=” ＋ 到文本 (阈值大小) ＋ #换行符 ＋ “转换目标=” ＋ 到文本 (目标大小) ＋ #换行符 ＋ “显示详情=” ＋ 到文本 (显示详情) ＋ #换行符 ＋ “最低质量=” ＋ 到文本 (最低质量) ＋ #换行符 ＋ “降低尺寸=” ＋ 到文本 (降低尺寸)
输出日志 ＝ 输出日志 ＋ 已有配置 ＋ #换行符
标准输出 (, 已有配置 ＋ #换行符)
.如果真 (是否已有配置 ＝ 假)
    删除文件 (取运行目录 () ＋ “\转换设置.ini”)
    写到文件 (取运行目录 () ＋ “\转换设置.ini”, 编码_Ansi到Utf8 (已有配置))
.如果真结束
文件_枚举EX (搜寻路径, , 真, &找到文件)
输出颜色 (“[操作完成] 全部执行完成”, #控制台颜色.白色)
写到文件 (取运行目录 () ＋ “\CLog_” ＋ 时间_取现行时间戳 () ＋ “.log”, 编码_Ansi到Utf8 (输出日志))
标准输入 ()
返回 (0)  ' 可以根据您的需要返回任意数值

.子程序 检测更新
.局部变量 访问结果, 文本型
.局部变量 i
.局部变量 访问状态, 整数型
.局部变量 最新版本, 文本型
.局部变量 下载地址, 文本型
.局部变量 输入内容, 文本型

输出颜色 (“当前版本” ＋ 当前版本 ＋ “，正在检查更新...”, #控制台颜色.白色, 真)
.计次循环首 (3, i)
    访问结果 ＝ 编码_Utf8到Ansi (网页_访问_对象 (“https://api.github.com/repos/wgzeyu/WebP-MCS/releases/latest”, , , , , , , 访问状态, , , , i × 10))
    .如果真 (访问状态 ＝ 200 且 快速取出现次数 (访问结果, “tag_name”) ≠ 0)
        调试输出 (访问结果)
        最新版本 ＝ 文本_取出中间文本 (访问结果, #引号 ＋ “tag_name” ＋ #引号 ＋ “:” ＋ #引号, #引号)
        下载地址 ＝ 文本_取出中间文本 (访问结果, #引号 ＋ “browser_download_url” ＋ #引号 ＋ “:” ＋ #引号, #引号)
        .如果 (最新版本 ≠ 当前版本)
            输出颜色 (“发现新版” ＋ 最新版本 ＋ “，是否更新？(y/N)：”, #控制台颜色.黄色, 真)
            输入内容 ＝ 标准输入 ()
            .如果真 (到小写 (输入内容) ＝ “y” 或 到小写 (输入内容) ＝ “yes” 或 到小写 (输入内容) ＝ “真” 或 到小写 (输入内容) ＝ “是”)
                网页_打开指定网址 (下载地址)
                结束 ()
            .如果真结束

        .否则
            输出颜色 (“已是最新版”, #控制台颜色.绿色)
        .如果结束
        .如果真 (文件是否存在 (取运行目录 () ＋ “\cwebp.exe”) ＝ 假)
            输出颜色 (“缺少运行所需的cwebp.exe！请将本软件压缩包中的cwebp.exe与WebP图片压缩.exe放置在同一目录！”, #控制台颜色.红色)
            网页_打开指定网址 (下载地址)
            标准输入 ()
            .如果真 (文件是否存在 (取运行目录 () ＋ “\cwebp.exe”) ＝ 假)
                结束 ()
            .如果真结束

        .如果真结束
        返回 ()
    .如果真结束

.计次循环尾 ()
输出颜色 (“网络错误，无法检查更新！”, #控制台颜色.红色)

.子程序 找到文件
.参数 找到文件名, 文本型
.参数 完整路径, 文本型
.局部变量 当前扩展名, 文本型
.局部变量 当前路径, 文本型
.局部变量 i, 整数型
.局部变量 n, 整数型
.局部变量 当前全文件, 本子图, , "0"
.局部变量 当前临时索引, 文本型, , "0"
.局部变量 当前文件, 本子图
.局部变量 中间文件, 本子图
.局部变量 当前文件数量, 整数型
.局部变量 基准大小, 整数型
.局部变量 目前最接近, 整数型
.局部变量 第几号最接近, 整数型
.局部变量 原总大小, 长整数型
.局部变量 新总大小, 长整数型
.局部变量 图片宽度, 整数型
.局部变量 图片高度, 整数型
.局部变量 新宽度, 整数型
.局部变量 新高度, 整数型
.局部变量 当前图片数据, 字节集
.局部变量 是否需要降尺寸, 逻辑型

当前扩展名 ＝ 到小写 (文件_取扩展名 (找到文件名))
.如果真 (当前扩展名 ≠ “.jpg” 且 当前扩展名 ≠ “.jpeg” 且 当前扩展名 ≠ “.png” 且 当前扩展名 ≠ “.bmp”)  ' 如需将WebP格式图片作为输入，
    返回 ()
.如果真结束
当前路径 ＝ 文件_取目录 (完整路径)
' 开始检测目录去重
.计次循环首 (取数组成员数 (已处理路径), i)
    .如果真 (当前路径 ＝ 已处理路径 [i])
        返回 ()
    .如果真结束

.计次循环尾 ()
加入成员 (已处理路径, 当前路径)
.如果真 (快速取出现次数 (当前路径, “?”) ≠ 0)
    输出颜色 (“[无法检测] 文件路径中含有Unicode字符, 路径: ” ＋ 当前路径, #控制台颜色.红色)
    返回 ()
.如果真结束
' 开始索引目录内图片
.计次循环首 (取数组成员数 (全扩展名), n)
    文件_枚举 (当前路径, “*.” ＋ 全扩展名 [n], 当前临时索引, 真, 假, 假)
    .计次循环首 (取数组成员数 (当前临时索引), i)
        当前文件.路径 ＝ 当前临时索引 [i]
        加入成员 (当前全文件, 当前文件)
    .计次循环尾 ()
    清除数组 (当前临时索引)
.计次循环尾 ()
当前文件数量 ＝ 取数组成员数 (当前全文件)
' 获取文件大小
.计次循环首 (当前文件数量, i)
    当前全文件 [i].大小 ＝ 取文件尺寸 (当前全文件 [i].路径)
.计次循环尾 ()
' 开始排序
.变量循环首 (1, 当前文件数量, 1, n)
    .变量循环首 (1, 当前文件数量 － n, 1, i)
        .如果真 (当前全文件 [i].大小 ＞ 当前全文件 [i ＋ 1].大小)
            当前文件 ＝ 当前全文件 [i]
            当前全文件 [i] ＝ 当前全文件 [i ＋ 1]
            当前全文件 [i ＋ 1] ＝ 当前文件
        .如果真结束

    .变量循环尾 ()
.变量循环尾 ()
' 寻找中间图片
.如果 (取文本右边 (到文本 (当前文件数量 ÷ 2), 2) ＝ “.5”)
    .如果 (当前文件数量 ＞ 1)
        .如果 (取随机数 (0, 1) ＝ 1)  ' 当图片数量为偶数时，随机选一个作为中间图片
            中间文件 ＝ 当前全文件 [到整数 (当前文件数量 ÷ 2)]
        .否则
            中间文件 ＝ 当前全文件 [到整数 (当前文件数量 ÷ 2) ＋ 1]
        .如果结束

    .否则
        中间文件 ＝ 当前全文件 [当前文件数量]
    .如果结束

.否则
    中间文件 ＝ 当前全文件 [到整数 (当前文件数量 ÷ 2)]
.如果结束
.如果 (中间文件.大小 ＜ 阈值大小)
    输出颜色 (“[无需转换] 图片数量：” ＋ 到文本 (当前文件数量) ＋ “，中间文件” ＋ 文件_取文件名 (中间文件.路径, 真) ＋ “大小：” ＋ 文件尺寸到文本 (中间文件.大小, 6) ＋ “，路径：” ＋ 当前路径, #控制台颜色.白色)
    返回 ()
.否则
    输出颜色 (“[需要转换] 图片数量：” ＋ 到文本 (当前文件数量) ＋ “，中间文件” ＋ 文件_取文件名 (中间文件.路径, 真) ＋ “大小：” ＋ 文件尺寸到文本 (中间文件.大小, 6) ＋ “，路径：” ＋ 当前路径, #控制台颜色.黄色)
.如果结束
' 计算转换参数
运行 (“cwebp.exe ” ＋ #引号 ＋ 中间文件.路径 ＋ #引号 ＋ “ -o ” ＋ #引号 ＋ 当前路径 ＋ “\f8f766oj.webp” ＋ #引号 ＋ “ -q 50 -mt ” ＋ 详情数组 [显示详情 ＋ 1], 真, 1)
基准大小 ＝ 取文件尺寸 (当前路径 ＋ “\f8f766oj.webp”)
删除文件 (当前路径 ＋ “\f8f766oj.webp”)
目前最接近 ＝ 1024 × 1024 × 1024
.计次循环首 (101, i)
    调试输出 (目前最接近, 第几号最接近)
    .如果真 (取相差 (到整数 (全百分比 [i] ÷ 100 × 基准大小), 目标大小) ＜ 目前最接近)
        第几号最接近 ＝ i － 1
        目前最接近 ＝ 取相差 (到整数 (全百分比 [i] ÷ 100 × 基准大小), 目标大小)
    .如果真结束

.计次循环尾 ()
.如果 (第几号最接近 ＜ 最低质量)  ' 如果目标质量小于最低质量
    .如果 (降低尺寸 ＝ 0)  ' 如果不需要降低尺寸
        输出颜色 (“[开始转换] 50质量基准尺寸为” ＋ 文件尺寸到文本 (基准大小, 5) ＋ “，” ＋ 到文本 (第几号最接近) ＋ “质量最接近，约为” ＋ 文件尺寸到文本 (到整数 (全百分比 [第几号最接近 ＋ 1] ÷ 100 × 基准大小), 6) ＋ “，但小于最低质量预设。将使用最低质量” ＋ 到文本 (最低质量) ＋ “转换，预测尺寸为” ＋ 文件尺寸到文本 (到整数 (全百分比 [最低质量 ＋ 1] ÷ 100 × 基准大小), 6), #控制台颜色.黄色)
        第几号最接近 ＝ 最低质量
    .否则
        输出颜色 (“[开始转换] 50质量基准尺寸为” ＋ 文件尺寸到文本 (基准大小, 5) ＋ “，” ＋ 到文本 (第几号最接近) ＋ “质量最接近，约为” ＋ 文件尺寸到文本 (到整数 (全百分比 [第几号最接近 ＋ 1] ÷ 100 × 基准大小), 6) ＋ “，但小于最低质量预设。”, #控制台颜色.黄色, 真)
        当前图片数据 ＝ 读入文件 (中间文件.路径)
        .如果 (到小写 (文件_取扩展名 (中间文件.路径)) ＝ “.webp”)
            WebP取图片大小 (当前图片数据, 图片宽度, 图片高度)
        .否则
            图片宽度 ＝ 图片_取宽度 (当前图片数据)
            图片高度 ＝ 图片_取高度 (当前图片数据)
        .如果结束
        当前图片数据 ＝ 到字节集 (“”)
        .如果 (图片高度 ＞ 图片宽度)
            新宽度 ＝ 降低尺寸
            新高度 ＝ 到整数 (四舍五入 (降低尺寸 ÷ 图片宽度 × 图片高度, 0))
        .否则
            新高度 ＝ 降低尺寸
            新宽度 ＝ 到整数 (四舍五入 (降低尺寸 ÷ 图片高度 × 图片宽度, 0))
        .如果结束
        .如果真 (新宽度 ＞ 图片宽度)
            新宽度 ＝ 0
            新高度 ＝ 0
        .如果真结束
        .如果真 (新宽度 ≠ 0)  ' 计算分辨率后再算一次转换参数
            是否需要降尺寸 ＝ 真
            运行 (“cwebp.exe ” ＋ #引号 ＋ 中间文件.路径 ＋ #引号 ＋ “ -o ” ＋ #引号 ＋ 当前路径 ＋ “\f8f766oj.webp” ＋ #引号 ＋ “ -q 50 -resize ” ＋ 到文本 (新宽度) ＋ “ ” ＋ 到文本 (新高度) ＋ “ -mt ” ＋ 详情数组 [显示详情 ＋ 1], 真, 1)
            调试输出 (“cwebp.exe ” ＋ #引号 ＋ 中间文件.路径 ＋ #引号 ＋ “ -o ” ＋ #引号 ＋ 当前路径 ＋ “\f8f766oj.webp” ＋ #引号 ＋ “ -q 50 -resize ” ＋ 到文本 (新宽度) ＋ “ ” ＋ 到文本 (新高度) ＋ “ -mt ” ＋ 详情数组 [显示详情 ＋ 1])
            基准大小 ＝ 取文件尺寸 (当前路径 ＋ “\f8f766oj.webp”)
            删除文件 (当前路径 ＋ “\f8f766oj.webp”)
            目前最接近 ＝ 1024 × 1024 × 1024
            .计次循环首 (101, i)
                调试输出 (目前最接近, 第几号最接近)
                .如果真 (取相差 (到整数 (全百分比 [i] ÷ 100 × 基准大小), 目标大小) ＜ 目前最接近)
                    第几号最接近 ＝ i － 1
                    目前最接近 ＝ 取相差 (到整数 (全百分比 [i] ÷ 100 × 基准大小), 目标大小)
                .如果真结束

            .计次循环尾 ()

        .如果真结束
        .如果 (第几号最接近 ＜ 最低质量)  ' 如果目标质量小于最低质量
            输出颜色 (“降低尺寸后，50质量基准尺寸为” ＋ 文件尺寸到文本 (基准大小, 5) ＋ “，” ＋ 到文本 (第几号最接近) ＋ “质量最接近，约为” ＋ 文件尺寸到文本 (到整数 (全百分比 [第几号最接近 ＋ 1] ÷ 100 × 基准大小), 6) ＋ “，但仍小于最低质量预设。将使用最低质量” ＋ 到文本 (最低质量) ＋ “转换，预测尺寸为” ＋ 文件尺寸到文本 (到整数 (全百分比 [最低质量 ＋ 1] ÷ 100 × 基准大小), 6), #控制台颜色.黄色)
            第几号最接近 ＝ 最低质量
        .否则
            输出颜色 (“降低尺寸后，50质量基准尺寸为” ＋ 文件尺寸到文本 (基准大小, 5) ＋ “，” ＋ 到文本 (第几号最接近) ＋ “质量最接近，约为” ＋ 文件尺寸到文本 (到整数 (全百分比 [第几号最接近 ＋ 1] ÷ 100 × 基准大小), 6), #控制台颜色.绿色)
        .如果结束

    .如果结束

.否则
    输出颜色 (“[开始转换] 50质量基准尺寸为” ＋ 文件尺寸到文本 (基准大小, 5) ＋ “，” ＋ 到文本 (第几号最接近) ＋ “质量最接近，约为” ＋ 文件尺寸到文本 (到整数 (全百分比 [第几号最接近 ＋ 1] ÷ 100 × 基准大小), 6), #控制台颜色.绿色)
.如果结束
.如果真 (到整数 (全百分比 [第几号最接近 ＋ 1] ÷ 100 × 基准大小) ＞ 中间文件.大小)
    输出颜色 (“[跳过转换] 预测转换大小比源文件大，路径：” ＋ 当前路径, #控制台颜色.红色)
    返回 ()
.如果真结束
.计次循环首 (当前文件数量, i)  ' 开始转换
    .如果真 (是否需要降尺寸 ＝ 真)  ' 降尺寸计算
        当前图片数据 ＝ 读入文件 (当前全文件 [i].路径)
        .如果 (到小写 (文件_取扩展名 (当前全文件 [i].路径)) ＝ “.webp”)
            WebP取图片大小 (当前图片数据, 图片宽度, 图片高度)
        .否则
            图片宽度 ＝ 图片_取宽度 (当前图片数据)
            图片高度 ＝ 图片_取高度 (当前图片数据)
        .如果结束
        当前图片数据 ＝ 到字节集 (“”)
        .如果 (图片高度 ＞ 图片宽度)
            新宽度 ＝ 降低尺寸
            新高度 ＝ 到整数 (四舍五入 (降低尺寸 ÷ 图片宽度 × 图片高度, 0))
        .否则
            新高度 ＝ 降低尺寸
            新宽度 ＝ 到整数 (四舍五入 (降低尺寸 ÷ 图片高度 × 图片宽度, 0))
        .如果结束
        .如果真 (新宽度 ＞ 图片宽度)
            新宽度 ＝ 0
            新高度 ＝ 0
        .如果真结束

    .如果真结束
    .如果 (是否需要降尺寸 ＝ 真 且 新宽度 ≠ 0)
        运行 (“cwebp.exe ” ＋ #引号 ＋ 当前全文件 [i].路径 ＋ #引号 ＋ “ -o ” ＋ #引号 ＋ 文件_取目录 (当前全文件 [i].路径) ＋ 文件_取文件名 (当前全文件 [i].路径, 假) ＋ “.webp” ＋ #引号 ＋ “ -q ” ＋ 到文本 (第几号最接近) ＋ “ -resize ” ＋ 到文本 (新宽度) ＋ “ ” ＋ 到文本 (新高度) ＋ “ -mt ” ＋ 详情数组 [显示详情 ＋ 1], 真, 1)
    .否则
        运行 (“cwebp.exe ” ＋ #引号 ＋ 当前全文件 [i].路径 ＋ #引号 ＋ “ -o ” ＋ #引号 ＋ 文件_取目录 (当前全文件 [i].路径) ＋ 文件_取文件名 (当前全文件 [i].路径, 假) ＋ “.webp” ＋ #引号 ＋ “ -q ” ＋ 到文本 (第几号最接近) ＋ “ -mt ” ＋ 详情数组 [显示详情 ＋ 1], 真, 1)
    .如果结束
    当前全文件 [i].新大小 ＝ 取文件尺寸 (文件_取目录 (当前全文件 [i].路径) ＋ 文件_取文件名 (当前全文件 [i].路径, 假) ＋ “.webp”)
    .如果真 (当前全文件 [i].新大小 ≠ 0)
        删除文件 (当前全文件 [i].路径)
    .如果真结束
    .如果真 (中间文件.路径 ＝ 当前全文件 [i].路径)
        中间文件.新大小 ＝ 当前全文件 [i].新大小
    .如果真结束
    原总大小 ＝ 原总大小 ＋ 当前全文件 [i].大小
    新总大小 ＝ 新总大小 ＋ 当前全文件 [i].新大小
.计次循环尾 ()
输出颜色 (“[转换完成] 中间文件尺寸为” ＋ 文件尺寸到文本 (中间文件.新大小, 6) ＋ “，全部图片总体减小了” ＋ 到文本 (四舍五入 ((原总大小 － 新总大小) ÷ 原总大小 × 100, 0)) ＋ “%。原来” ＋ 文件尺寸到文本 (原总大小, 6) ＋ “，现在” ＋ 文件尺寸到文本 (新总大小, 6) ＋ “。”, #控制台颜色.绿色)

.子程序 WebP取图片大小, 逻辑型
.参数 要检测的图片, 字节集
.参数 webp图片宽度, 整数型, 参考
.参数 webp图片高度, 整数型, 参考

.如果真 (字节集到十六进制 (取字节集左边 (要检测的图片, 4)) ≠ “52494646”)
    返回 (假)
.如果真结束
webp图片宽度 ＝ 取字节集数据 (要检测的图片, 2, 27)
webp图片高度 ＝ 取字节集数据 (要检测的图片, 2, 29)
返回 (真)

.子程序 字节集到十六进制, 文本型
.参数 要转换的字节集, 字节集
.局部变量 转换后, 文本型
.局部变量 i
.局部变量 单字节集, 字节集

.计次循环首 (取字节集长度 (要转换的字节集), i)
    单字节集 ＝ 取字节集中间 (要转换的字节集, i, 1)
    .判断开始 (单字节集 ≠ 取空白字节集 (1))
        转换后 ＝ 转换后 ＋ 取十六进制文本 (取字节集数据 (单字节集, 2, ))
    .默认
        转换后 ＝ 转换后 ＋ “00”
    .判断结束

.计次循环尾 ()
返回 (转换后)

.子程序 文件尺寸到文本, 文本型
.参数 文件尺寸, 长整数型, , 单位为字节“B”
.参数 字节长度, 短整数型, , 输出字节长度，用于判断保留小数
.局部变量 当前单位, 短整数型
.局部变量 当前尺寸, 双精度小数型
.局部变量 单位文本, 文本型, , "0"
.局部变量 当前内容, 文本型
.局部变量 补0内容, 文本型

当前尺寸 ＝ 文件尺寸
单位文本 ＝ 分割文本 (“B,KB,MB,GB,TB,PB,EB,ZB,YB,BB,NB,DB”, “,”, )
.判断循环首 (当前尺寸 ≥ 1024 且 当前单位 ≤ 11)
    当前尺寸 ＝ 当前尺寸 ÷ 1024
    当前单位 ＝ 当前单位 ＋ 1
.判断循环尾 ()
当前内容 ＝ 到文本 (四舍五入 (当前尺寸, 字节长度 － 3 － 取文本长度 (到文本 (到整数 (当前尺寸)))))
' 返回 (到文本 (四舍五入 (当前尺寸, 字节长度 － 3 － 取文本长度 (到文本 (到整数 (当前尺寸))))) ＋ 单位文本 [当前单位 ＋ 1])
返回 (当前内容 ＋ 补0内容 ＋ 单位文本 [当前单位 ＋ 1])

.子程序 取相差, 整数型
.参数 输入1, 整数型
.参数 输入2, 整数型

.如果真 (输入1 ＞ 输入2)
    返回 (输入1 － 输入2)
.如果真结束
返回 (输入2 － 输入1)

.子程序 快速取出现次数, 整数型
.参数 全部文本, 文本型
.参数 要找的文本, 文本型
.局部变量 全部内容, 快速文本对象

全部内容.置文本 (全部文本)
返回 (全部内容.替换子文本 (要找的文本, “”, , , 真))

.子程序 输出颜色, 逻辑型
.参数 输出文本, 文本型
.参数 输出颜色, 整数型
.参数 不带换行, 逻辑型, 可空
.局部变量 控制台, 控制台对象
.局部变量 输出的内容, 文本型

.如果 (不带换行)
    输出的内容 ＝ 输出文本
.否则
    输出的内容 ＝ 输出文本 ＋ #换行符
.如果结束
输出日志 ＝ 输出日志 ＋ 输出的内容
返回 (控制台.输出 (, , 假, 输出颜色, #控制台颜色.黑色, 输出的内容))
.版本 2

.数据类型 本子图
    .成员 路径, 文本型
    .成员 大小, 整数型
    .成员 新大小, 整数型
.版本 2

.常量 全百分比, "<文本长度: 1160>", , WebP压本子时，各质量的体积为50的多少（压了10张不同风格不同尺寸的本子图取平均）
